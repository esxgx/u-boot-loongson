/***************************************************************************
 * Name:
 *     smi712.h
 * License:
 *     2003-2007, Copyright by BLX IC Design Co., Ltd.
 * Description:
 *     Smi 712 VGA card bios driver for BLX 1A
 *     The code from linux framebuffer drivers.
 *
 ***************************************************************************/

#ifndef  __SMI_712_
#define  __SMI_712_
#include <linux/types.h>

#define	SM712_2D_DEBUG		1

#define  IO_BASE  0xbfd00000
// jlliu : define it for 8inch
//#define	USE_LCD_800_480
//#define	APV_LCD
#define	USE_LCD_1024_600


#ifdef	USE_LCD_800_480		// 800x480x16x72
#define	SM712_FIX_WIDTH		800
#define	SM712_FIX_HEIGHT	480
#define	SM712_FIX_DEPTH		16
#define	SM712_FIX_HZ		72
#endif

#ifdef	USE_LCD_1024_600	// 1024x600x16x60
#define	SM712_FIX_WIDTH		1024
#define	SM712_FIX_HEIGHT	600
#define	SM712_FIX_DEPTH		16
#define	SM712_FIX_HZ		60
#endif

/*****************************************************************************/

static  char   *SMIRegs;        /* point to virtual Memory Map IO starting address */
static  char   *SMILFB;         /* point to virtual video memory starting address  */
static  struct par_info hw;     /* used to record hardware information             */

#define smi_mmiowb(dat,reg)     writeb((dat), SMIRegs + (reg))
#define smi_mmioww(dat,reg)     writew((dat), SMIRegs + (reg))
#define smi_mmiowl(dat,reg)     writel((dat), SMIRegs + (reg))

#define smi_mmiorb(reg)         readb((unsigned long)(SMIRegs + (reg)))
#define smi_mmiorw(reg)         readw((unsigned long)(SMIRegs + (reg)))
#define smi_mmiorl(reg)         readl((unsigned long)(SMIRegs + (reg)))

#define SIZE_SR00_SR04          (0x04 - 0x00 + 1)
#define SIZE_SR10_SR24          (0x24 - 0x10 + 1)
#define SIZE_SR30_SR75          (0x75 - 0x30 + 1)
#define SIZE_SR80_SR93          (0x93 - 0x80 + 1)
#define SIZE_SRA0_SRAF          (0xAF - 0xA0 + 1)
#define SIZE_GR00_GR08          (0x08 - 0x00 + 1)
#define SIZE_AR00_AR14          (0x14 - 0x00 + 1)
#define SIZE_CR00_CR18          (0x18 - 0x00 + 1)
#define SIZE_CR30_CR4D          (0x4D - 0x30 + 1)
#define SIZE_CR90_CRA7          (0xA7 - 0x90 + 1)
#define SIZE_VPR                (0x6C + 1)
#define SIZE_DPR                (0x44 + 1)

#define numVGAModes             7
#define numChipIDs              3

#define NR_PALETTE              256
#define NR_RGB                  2

/****************************************************************************
 * Minimum X and Y resolutions
 ****************************************************************************/
#define MIN_XRES                640
#define MIN_YRES                480

static inline void smi_crtcw(int reg, int val)
{
	smi_mmiowb(reg, 0x3d4);
	smi_mmiowb(val, 0x3d5);
}

static inline unsigned int smi_crtcr(int reg)
{       
	smi_mmiowb(reg, 0x3d4);
	return smi_mmiorb(0x3d5);
}

static inline void smi_grphw(int reg, int val)
{
	smi_mmiowb(reg, 0x3ce);
	smi_mmiowb(val, 0x3cf);
}

static inline unsigned int smi_grphr(int reg)
{
	smi_mmiowb(reg, 0x3ce);
	return smi_mmiorb(0x3cf);
}

static inline void smi_attrw(int reg, int val)
{
	smi_mmiorb(0x3da);
	smi_mmiowb(reg, 0x3c0);
	smi_mmiorb(0x3c1);
	smi_mmiowb(val, 0x3c0);
}

static inline void smi_seqw(int reg, int val)
{
	smi_mmiowb(reg, 0x3c4);
	smi_mmiowb(val, 0x3c5);
}

static inline unsigned int smi_seqr(int reg)
{
	smi_mmiowb(reg, 0x3c4);
	return smi_mmiorb(0x3c5);
}

#ifdef	SM712_2D_DEBUG

#define	REG_2D_SRC_XY			0x00
#define	REG_2D_DST_XY			0x04
#define	REG_2D_DIM_XY			0x08
#define	REG_2D_DE_CTRL			0x0C
#define	REG_2D_PITCH_XY			0x10
#define	REG_2D_COLOR_FG			0x14
#define	REG_2D_COLOR_BG			0x18
#define	REG_2D_DEDF				0x1C
#define	REG_2D_COLOR_COM		0x20
#define	REG_2D_COLOR_COM_MASK	0x24
#define	REG_2D_BB_MASK			0x28
#define	REG_2D_CROP_LEFTTOP		0x2C
#define	REG_2D_CROP_RIGHTBOTTOM	0x30
#define	REG_2D_MONO_PATTERN_LOW	0x34
#define	REG_2D_MONO_PATTERN_HIGH	0x38
#define	REG_2D_SRC_WINDOW		0x3C
#define	REG_2D_SRC_BASE			0x40
#define	REG_2D_DST_BASE			0x44

unsigned char smi_2d_busy = 0;
char *SMI2DBaseAddress;

void smi_2dregw(unsigned long offset, unsigned long data)
{
	*((volatile unsigned long *)(SMI2DBaseAddress + offset)) = data;
}

unsigned long smi_2dregr(unsigned long offset)
{
	return *((volatile unsigned long *)(SMI2DBaseAddress + offset));
}

#endif

struct par_info {
	/* Hardware */
	u16             chipID;
	char            *m_pLFB;
	char            *m_pMMIO;
	char            *m_pDPR;
	char            *m_pVPR;

	u32             width;
	u32             height;
	u32             hz;
	/* glame add */
	u32             bits_per_pixel;
};

/* The next structure holds all information relevant for a specific video mode. */
struct ModeInit
{
	int             mmSizeX;
	int             mmSizeY;
	int             bpp;
	int             hz;
	unsigned char   Init_MISC;
	unsigned char   Init_SR00_SR04[SIZE_SR00_SR04];
	unsigned char   Init_SR10_SR24[SIZE_SR10_SR24];
	unsigned char   Init_SR30_SR75[SIZE_SR30_SR75];
	unsigned char   Init_SR80_SR93[SIZE_SR80_SR93];
	unsigned char   Init_SRA0_SRAF[SIZE_SRA0_SRAF];
	unsigned char   Init_GR00_GR08[SIZE_GR00_GR08];
	unsigned char   Init_AR00_AR14[SIZE_AR00_AR14];
	unsigned char   Init_CR00_CR18[SIZE_CR00_CR18];
	unsigned char   Init_CR30_CR4D[SIZE_CR30_CR4D];
	unsigned char   Init_CR90_CRA7[SIZE_CR90_CRA7];
};


struct ModeInit VGAMode[numVGAModes] =
{
	{
		/*  mode#0: 640 x 480  8Bpp  60Hz */
		640, 480, 8, 60,
		/*  Init_MISC */
		0xE3,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x00, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEF, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x32, 0x03, 0xA0, 0x09, 0xC0, 0x32, 0x32, 0x32,
			0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x32, 0x32, 0x32,
			0x04, 0x24, 0x63, 0x4F, 0x52, 0x0B, 0xDF, 0xEA,
			0x04, 0x50, 0x19, 0x32, 0x32, 0x00, 0x00, 0x32,
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x07, 0x82, 0x07, 0x04,
			0x00, 0x45, 0x30, 0x30, 0x40, 0x30,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x07, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x32,
			0xF7, 0x00, 0x00, 0x00, 0xEF, 0xFF, 0x32, 0x32,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xFF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x5F, 0x4F, 0x4F, 0x00, 0x53, 0x1F, 0x0B, 0x3E,
			0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEA, 0x0C, 0xDF, 0x50, 0x40, 0xDF, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xFF, 0xFD,
			0x5F, 0x4F, 0x00, 0x54, 0x00, 0x0B, 0xDF, 0x00,
			0xEA, 0x0C, 0x2E, 0x00, 0x4F, 0xDF,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0xDD, 0x5E, 0xEA, 0x87, 0x44, 0x8F, 0x55,
			0x0A, 0x8F, 0x55, 0x0A, 0x00, 0x00, 0x18, 0x00,
			0x11, 0x10, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x00,
		},
	},
#ifdef	USE_LCD_800_480
	{
		/*  mode#1: 800 x 480  16Bpp  72Hz */
		800, 480, 16, 72,
		/*  Init_MISC */
		0x2B,	//0xE3,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x00, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEF, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			/* 0x30 can be used to control 16bits or 24bits. */
			/* 0x32 for DGA 24
			 * 0x22 for DGA 18
			 * */
		/*0x32*/0x22, 0x03, 0xA0, 0x09, 0xC0, 0x32, 0x32, 0x32,
			0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x32, 0x32, 0x32,
			0x04, 0x24, 0x63, 0x4F, 0x52, 0x0B, 0xDF, 0xEA,
			0x04, 0x50, 0x19, 0x32, 0x32, 0x00, 0x00, 0x32,
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			// jlliu : changed the CLK2 for 8inch lcd : 0x1c, 0x85
#ifdef	APV_LCD
			0x50, 0x03, 0x74, 0x14, 0x2E, 0x8b, 0x35, 0x13,
#else
			0x50, 0x03, 0x74, 0x14, 0x4c, 0x8b, 0x35, 0x13,
#endif
			//0x50, 0x03, 0x74, 0x14, 0x07, 0x82, 0x07, 0x04,
			0x00, 0x45, 0x30, 0x30, 0x40, 0x30,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x07, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x32,
			0xF7, 0x00, 0x00, 0x00, 0xEF, 0xFF, 0x32, 0x32,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xFF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x5F, 0x4F, 0x4F, 0x00, 0x53, 0x1F, 0x0B, 0x3E,
			0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEA, 0x0C, 0xDF, 0x50, 0x40, 0xDF, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xFF, 0xFD,
#if		0	// used for 8inch CRT 800x480	
			0x7F, 0x63, 0x00, 0x69, 0x1E, 0x0B, 0xDF, 0x00,
			0xE9, 0x0B, 0x2E, 0x00, 0x63, 0xDF,
#else		// used for 8inch LCD 800x480
		/*	0x7F, 0x63, 0x00, 0x7E, 0x1F, 0x0B, 0xDF, 0x00,
			0x02, 0x05, 0xAA, 0xC0, 0x63, 0xDF,
		*/
#ifdef	APV_LCD
			0x7F, 0x63, 0x00, 0x66, 0x10, 0x6f, 0x57, 0x00,
			0x58, 0x0b, 0xe0, 0x20, 0x63, 0x57,
//			0x6F, 0x63, 0x05, 0x6A, 0x05, 0x0C, 0xDF, 0x0C,
//			0xE1, 0x1C, 0xAE, 0x00, 0x63, 0xDF,
			// 0B : 10101110
#else
			0x7F, 0x63, 0x00, 0x66, 0x10, 0x6f, 0x57, 0x00,
			0x58, 0x0b, 0xe0, 0x20, 0x63, 0x57,
#endif

#endif
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0xDD, 0x5E, 0xEA, 0x87, 0x44, 0x8F, 0x55,
			0x0A, 0x8F, 0x55, 0x0A, 0x00, 0x00, 0x18, 0x00,
			0x11, 0x10, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x00,
		},
	},
#else
	{
		/*  mode#1: 640 x 480  16Bpp  60Hz */
		640, 480, 16, 60,
		/*  Init_MISC */
		0xE3,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x00, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEF, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x32, 0x03, 0xA0, 0x09, 0xC0, 0x32, 0x32, 0x32,
			0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x32, 0x32, 0x32,
			0x04, 0x24, 0x63, 0x4F, 0x52, 0x0B, 0xDF, 0xEA,
			0x04, 0x50, 0x19, 0x32, 0x32, 0x00, 0x00, 0x32,
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x07, 0x82, 0x07, 0x04,
			0x00, 0x45, 0x30, 0x30, 0x40, 0x30,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x07, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x32,
			0xF7, 0x00, 0x00, 0x00, 0xEF, 0xFF, 0x32, 0x32,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xFF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x5F, 0x4F, 0x4F, 0x00, 0x53, 0x1F, 0x0B, 0x3E,
			0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEA, 0x0C, 0xDF, 0x50, 0x40, 0xDF, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xFF, 0xFD,
			0x5F, 0x4F, 0x00, 0x54, 0x00, 0x0B, 0xDF, 0x00,
			0xEA, 0x0C, 0x2E, 0x00, 0x4F, 0xDF,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0xDD, 0x5E, 0xEA, 0x87, 0x44, 0x8F, 0x55,
			0x0A, 0x8F, 0x55, 0x0A, 0x00, 0x00, 0x18, 0x00,
			0x11, 0x10, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x00,
		},
	},
#endif
	{
		/*  mode#2: 640 x 480  24Bpp  60Hz */
		640, 480, 24, 60,
		/*  Init_MISC */
		0xE3,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x00, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEF, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x32, 0x03, 0xA0, 0x09, 0xC0, 0x32, 0x32, 0x32,
			0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x32, 0x32, 0x32,
			0x04, 0x24, 0x63, 0x4F, 0x52, 0x0B, 0xDF, 0xEA,
			0x04, 0x50, 0x19, 0x32, 0x32, 0x00, 0x00, 0x32,
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x07, 0x82, 0x07, 0x04,
			0x00, 0x45, 0x30, 0x30, 0x40, 0x30,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x07, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x32,
			0xF7, 0x00, 0x00, 0x00, 0xEF, 0xFF, 0x32, 0x32,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xFF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x5F, 0x4F, 0x4F, 0x00, 0x53, 0x1F, 0x0B, 0x3E,
			0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xEA, 0x0C, 0xDF, 0x50, 0x40, 0xDF, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xFF, 0xFD,
			0x5F, 0x4F, 0x00, 0x54, 0x00, 0x0B, 0xDF, 0x00,
			0xEA, 0x0C, 0x2E, 0x00, 0x4F, 0xDF,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0xDD, 0x5E, 0xEA, 0x87, 0x44, 0x8F, 0x55,
			0x0A, 0x8F, 0x55, 0x0A, 0x00, 0x00, 0x18, 0x00,
			0x11, 0x10, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x00,
		},
	},
	{/*  mode#3: 800 x 600  8Bpp  60Hz */
		800,600,8,60,
		0x2B,   /*  Init_MISC */
		{       /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x03, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEE, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x24, 0x03, 0x20, 0x09, 0xC0, 0x24, 0x24, 0x24,
			0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x38, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x24, 0x24, 0x24,
			0x04, 0x48, 0x83, 0x63, 0x68, 0x72, 0x57, 0x58,
			0x04, 0x55, 0x59, 0x24, 0x24, 0x00, 0x00, 0x24,
			0x01, 0x80, 0x7A, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x1C, 0x85, 0x35, 0x13,
			0x02, 0x45, 0x30, 0x35, 0x40, 0x20,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x87, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x24,
			0x90, 0x01, 0x2C, 0x01, 0xFF, 0x00, 0x24, 0x24,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xBF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x7F, 0x63, 0x63, 0x00, 0x68, 0x18, 0x72, 0xF0,
			0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x58, 0x0C, 0x57, 0x64, 0x40, 0x57, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xBF, 0xFD,
			0x7F, 0x63, 0x00, 0x69, 0x18, 0x72, 0x57, 0x00,
			0x58, 0x0C, 0xE0, 0x20, 0x63, 0x57,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0x4B, 0x5E, 0x55, 0x86, 0x9D, 0x8E, 0xAA,
			0xDB, 0x2A, 0xDF, 0x33, 0x00, 0x00, 0x18, 0x00,
			0x20, 0x1F, 0x1A, 0x19, 0x0F, 0x0F, 0x0F, 0x00,
		},
	},
#if	1	
	{/*  mode#4: 800 x 600  16Bpp  60Hz */
		800, 600, 16, 60,
		/*  Init_MISC */
		0x2B,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x03, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEE, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x24, 0x03, 0x20, 0x09, 0xC0, 0x24, 0x24, 0x24,
			0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x38, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x24, 0x24, 0x24,
			0x04, 0x48, 0x83, 0x63, 0x68, 0x72, 0x57, 0x58,
			0x04, 0x55, 0x59, 0x24, 0x24, 0x00, 0x00, 0x24,
			0x01, 0x80, 0x7A, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x1C, 0x85, 0x35, 0x13,
			0x02, 0x45, 0x30, 0x35, 0x40, 0x20,
		},
		{   /*  Init_SR80_SR93 */
			0x00, 0x00, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x24,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x24, 0x24,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xBF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x7F, 0x63, 0x63, 0x00, 0x68, 0x18, 0x72, 0xF0,
			0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x58, 0x0C, 0x57, 0x64, 0x40, 0x57, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xBF, 0xFD,
			0x7F, 0x63, 0x00, 0x69, 0x18, 0x72, 0x57, 0x00,
			0x58, 0x0C, 0xE0, 0x20, 0x63, 0x57,

			//0x7F, 0x63, 0x00, 0x69, 0x18, 0x72, 0x57, 0x00,
			//0x58, 0x0C, 0xE0, 0x20, 0x63, 0x57,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0x4B, 0x5E, 0x55, 0x86, 0x9D, 0x8E, 0xAA,
			0xDB, 0x2A, 0xDF, 0x33, 0x00, 0x00, 0x18, 0x00,
			0x20, 0x1F, 0x1A, 0x19, 0x0F, 0x0F, 0x0F, 0x00,
		},
	},
#else
	{/*  mode#4: 800 x 600  16Bpp  60Hz */
		800, 600, 16, 60,
		/*  Init_MISC */
		0x2B,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x03, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEE, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x24, 0x03, 0x20, 0x09, 0xC0, 0x24, 0x24, 0x24,
			0x24, 0x24, 0x24, 0x24, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x38, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x24, 0x24, 0x24,
			0x04, 0x48, 0x83, 0x63, 0x68, 0x72, 0x57, 0x58,
			0x04, 0x55, 0x59, 0x24, 0x24, 0x00, 0x00, 0x24,
			0x01, 0x80, 0x7A, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x1C, 0x85, 0x35, 0x13,
			0x02, 0x45, 0x30, 0x35, 0x40, 0x20,
		},
		{   /*  Init_SR80_SR93 */
			0x00, 0x00, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x24,
			0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x24, 0x24,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xBF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x7F, 0x63, 0x63, 0x00, 0x68, 0x18, 0x72, 0xF0,
			0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x58, 0x0C, 0x57, 0x64, 0x40, 0x57, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xBF, 0xFD,
			0x7F, 0x63, 0x00, 0x69, 0x18, 0x72, 0x57, 0x00,
			0x58, 0x0C, 0xE0, 0x20, 0x63, 0x57,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0x4B, 0x5E, 0x55, 0x86, 0x9D, 0x8E, 0xAA,
			0xDB, 0x2A, 0xDF, 0x33, 0x00, 0x00, 0x18, 0x00,
			0x20, 0x1F, 0x1A, 0x19, 0x0F, 0x0F, 0x0F, 0x00,
		},
	},
#endif
	{/*  mode#5: 800 x 600  24Bpp  60Hz */
		800,600,24,60,
		0x2B,
		{   /*  Init_SR0_SR4 */
			0x03, 0x01, 0x0F, 0x03, 0x0E,
		},
		{   /*  Init_SR10_SR24 */
			0xFF, 0xBE, 0xEE, 0xFF, 0x00, 0x0E, 0x17, 0x2C,
			0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xC4, 0x30, 0x02, 0x01, 0x01,
		},
		{   /*  Init_SR30_SR75 */
			0x36, 0x03, 0x20, 0x09, 0xC0, 0x36, 0x36, 0x36,
			0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0x03, 0xFF,
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC,
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x36, 0x36, 0x36,
			0x04, 0x48, 0x83, 0x63, 0x68, 0x72, 0x57, 0x58,
			0x04, 0x55, 0x59, 0x36, 0x36, 0x00, 0x00, 0x36,
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00,
			0x50, 0x03, 0x74, 0x14, 0x1C, 0x85, 0x35, 0x13,
			0x02, 0x45, 0x30, 0x30, 0x40, 0x20,
		},
		{   /*  Init_SR80_SR93 */
			0xFF, 0x07, 0x00, 0x6F, 0x7F, 0x7F, 0xFF, 0x36,
			0xF7, 0x00, 0x00, 0x00, 0xEF, 0xFF, 0x36, 0x36,
			0x00, 0x00, 0x00, 0x00,
		},
		{   /*  Init_SRA0_SRAF */
			0x00, 0xFF, 0xBF, 0xFF, 0xFF, 0xED, 0xED, 0xED,
			0x7B, 0xFF, 0xFF, 0xFF, 0xBF, 0xEF, 0xBF, 0xDF,
		},
		{   /*  Init_GR00_GR08 */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
			0xFF,
		},
		{   /*  Init_AR00_AR14 */
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
			0x41, 0x00, 0x0F, 0x00, 0x00,
		},
		{   /*  Init_CR00_CR18 */
			0x7F, 0x63, 0x63, 0x00, 0x68, 0x18, 0x72, 0xF0,
			0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x58, 0x0C, 0x57, 0x64, 0x40, 0x57, 0x00, 0xE3,
			0xFF,
		},
		{   /*  Init_CR30_CR4D */
			0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x03, 0x20,
			0x00, 0x00, 0x00, 0x40, 0x00, 0xE7, 0xBF, 0xFD,
			0x7F, 0x63, 0x00, 0x69, 0x18, 0x72, 0x57, 0x00,
			0x58, 0x0C, 0xE0, 0x20, 0x63, 0x57,
		},
		{   /*  Init_CR90_CRA7 */
			0x56, 0x4B, 0x5E, 0x55, 0x86, 0x9D, 0x8E, 0xAA,
			0xDB, 0x2A, 0xDF, 0x33, 0x00, 0x00, 0x18, 0x00,
			0x20, 0x1F, 0x1A, 0x19, 0x0F, 0x0F, 0x0F, 0x00,
		},
	},
    { /*  mode#6: 1024 x 600  16Bpp  60Hz */ 
        1024,600,16,60,
		/*  Init_MISC */                                    
		0xEB,                                               
		{   /*  Init_SR0_SR4 */                             
			0x03, 0x01, 0x0F, 0x00, 0x0E,                   
		},                                                  
		{   /*  Init_SR10_SR24 */                           
			0xC8, 0x40, 0x14, 0x60, 0x00, 0x0A, 0x92, 0x00, 
			0x51, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0xC4, 0x30, 0x02, 0x00, 0x01,                   
		},                                                  
		{   /*  Init_SR30_SR75 */                           
			0x28, 0x03, 0x24, 0x09, 0xC0, 0x3A, 0x3A, 0x3A, 
			0x3A, 0x3A, 0x3A, 0x3A, 0x00, 0x00, 0x03, 0xFF, 
			0x00, 0xFC, 0x00, 0x00, 0x20, 0x18, 0x00, 0xFC, 
			0x20, 0x0C, 0x44, 0x20, 0x00, 0x00, 0x00, 0x3A, 
			0x06, 0x68, 0xA7, 0x7F, 0x83, 0x24, 0xFF, 0x03, 
			0x00, 0x60, 0x59, 0x3A, 0x3A, 0x00, 0x00, 0x3A, 
			0x01, 0x80, 0x7E, 0x1A, 0x1A, 0x00, 0x00, 0x00, 
			0x50, 0x03, 0x16, 0x02, 0x52, 0x89, 0x09, 0x02, 
			0x04, 0x45, 0x30, 0x30, 0x40, 0x20,             
		},                                                  
		{   /*  Init_SR80_SR93 */                           
			0xFF, 0x07, 0x00, 0x00, 0x08, 0x00, 0x42, 0x3A, 
			0x59, 0x02, 0x44, 0x02, 0x00, 0xFF, 0x3A, 0x3A, 
			0x00, 0x00, 0x00, 0x00,                         
		},                                                  
		{   /*  Init_SRA0_SRAF */                           
			0x00, 0x10, 0x08, 0x00, 0x02, 0xED, 0xED, 0xED, 
			0x7B, 0xFB, 0xFF, 0xFF, 0x97, 0xEF, 0xBF, 0xDF, 
		},                                                  
		{   /*  Init_GR00_GR08 */                           
			0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F, 
			0xFF,                                           
		},                                                  
		{   /*  Init_AR00_AR14 */                           
			0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
			0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
			0x41, 0x00, 0x0F, 0x00, 0x00,                   
		},                                                  
		{   /*  Init_CR00_CR18 */                           
			0xA3, 0x7F, 0x7F, 0x00, 0x85, 0x16, 0x24, 0xF5, 
			0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
			0x03, 0x09, 0xFF, 0x80, 0x40, 0xFF, 0x00, 0xE3, 
			0xFF,                                           
		},                                                  
		{   /*  Init_CR30_CR4D */                           
			0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x20, 
			0x00, 0x00, 0x00, 0x40, 0x00, 0xFF, 0x46, 0x91, 
			0xA3, 0x7F, 0x00, 0x86, 0x15, 0x24, 0xFF, 0x00, 
			0x01, 0x07, 0xE5, 0x20, 0x7F, 0x57,             
//			0x91, 0x7F, 0x00, 0x82, 0x0B, 0x6F, 0x57, 0x00, 
//			0x5C, 0x0F, 0xE0, 0xE0, 0x7F, 0x57,             

		},                                                  
		{   /*  Init_CR90_CRA7 */                           
			0x55, 0xD5, 0x5D, 0xDD, 0x86, 0x17, 0x8E, 0xAA, 
			0x8A, 0xA3, 0xDE, 0xAB, 0x00, 0x00, 0x00, 0x00, 
			0x02, 0x02, 0x02, 0x15, 0x02, 0x06, 0x00, 0x00, 
		},                                                  
	},                                                      
};

#endif /*__SMI_712__*/
